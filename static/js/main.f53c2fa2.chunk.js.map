{"version":3,"sources":["Ticket.js","App.js","reportWebVitals.js","index.js"],"names":["Ticket","props","ticket","className","isWon","checked","onClick","winningCombinations","_","concat","range","map","i","j","ticketNames","App","useState","tickets","setTickets","setIsWon","Array","length","fill","winningArray","setWinningArray","useEffect","shuffled","sort","Math","random","splice","name","index","checkWin","forEach","array","counterWin","el","Snow","console","log","setTimeout","id","onTicketClicked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAYeA,EATA,SAACC,GACZ,IAAMC,EAASD,EAAMC,OACrB,OACI,qBAAKC,UAAWF,EAAMG,MAAQ,aAAeF,EAAOG,QAAU,gBAAkB,SAAWC,QAAS,kBAAML,EAAMK,WAAhH,SACI,4BAAIJ,EAAOA,Y,0BCDjBK,EAAsBC,IAAEC,OAC5BD,IAAEE,MAAM,GAAGC,KAAI,SAACC,GAAD,OAAOJ,IAAEE,MAAM,GAAGC,KAAI,SAACE,GAAD,OAAS,EAAFD,EAAIC,QAChDL,IAAEE,MAAM,GAAGC,KAAI,SAACC,GAAD,OAAOJ,IAAEE,MAAM,GAAGC,KAAI,SAACE,GAAD,OAAOD,EAAE,EAAEC,QAChD,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,MAGvBC,EAAc,CACd,mCACA,gBACA,mCACA,2BACA,0CACA,iCACA,sBACA,4BACA,qBACA,2CACA,uCACA,kCACA,mCACA,oCACA,yCACA,iCACA,+BACA,mBACA,sCACA,wBACA,qBACA,6BACA,uBACA,2BAkFSC,EA/EH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEUF,oBAAS,GAFnB,mBAETZ,EAFS,KAEFe,EAFE,OAGwBH,mBAASI,MAAMb,EAAoBc,QAAQC,MAAK,IAHxE,mBAGTC,EAHS,KAGKC,EAHL,KAKhBC,qBAAU,WACR,IAAIC,EAAWZ,EAAYa,MAAK,kBAAMC,KAAKC,SAAW,MACtDH,EAASI,OAAO,GAAI,EAAG,mBACvBZ,EAAWQ,EAASf,KAAI,SAACoB,EAAMC,GAC7B,OAAc,KAAVA,EACK,CAAE9B,OAAQ6B,EAAM1B,SAAS,GAEzB,CAAEH,OAAQ6B,EAAO1B,SAAS,SAGpC,IAEHoB,qBAAU,cACP,CAACR,IAEJQ,qBAAU,WACRN,GAAS,KACR,CAACI,IAQJ,IAAMU,EAAW,WACf1B,EAAoB2B,SAAQ,SAACC,EAAOH,GAClC,IAAII,EAAa,EACjBD,EAAMxB,KAAI,SAAA0B,GACHpB,EAAQoB,IAAgC,GAAvBpB,EAAQoB,GAAIhC,SAChC+B,OAGgB,IAAfA,GAA6C,GAAvBb,EAAaS,KACtCT,EAAaS,IAAS,EACtBR,EAAgB,YAAID,GAAe,CAACA,SAO1C,SAASe,IAQP,OAPAb,qBAAU,WAERc,QAAQC,IAAI,WACZC,YAAW,WACPtB,GAAS,KACR,QAEA,wBAAQuB,GAAG,WAGpB,OACE,sBAAKvC,UAAU,MAAf,UACA,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QAAf,SACI,sBAAKA,UAAU,QAAf,UACCc,EAAQN,KAAI,SAACT,EAAQ8B,GACpB,OAAO,cAAC,EAAD,CACG9B,OAAQA,EAERE,MAAOA,EACPE,QAAS,kBA5C3B,SAAyB0B,GACvBf,EAAQe,GAAO3B,SAAU,EACzBa,EAAW,YAAID,GAAU,CAACA,IAC1BgB,IAyC+BU,CAAgBX,KAF1BA,MAMhB5B,EAAQ,cAACkC,EAAD,IAAU,cCnGZM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f53c2fa2.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Ticket.css\";\n\nconst Ticket = (props) => {\n    const ticket = props.ticket;\n    return (\n        <div className={props.isWon ? \"ticket win\" : ticket.checked ? \"ticket active\" : \"ticket\" } onClick={() => props.onClick()}>\n            <p>{ticket.ticket}</p> \n        </div>\n    )\n}\n\nexport default Ticket;","import './App.css';\nimport Ticket from \"./Ticket\";\nimport React, {useState, useEffect} from 'react';\nimport {start} from \"./Snow\";\nimport _ from 'lodash';\n\nconst winningCombinations = _.concat(\n  _.range(5).map((i) => _.range(5).map((j) => i*5+j)),\n  _.range(5).map((i) => _.range(5).map((j) => i+5*j)),\n  [[0,6,12,18,24],[4,8,12,16,20]], // diagonals\n)\n\nconst ticketNames = [\n      \"(child noises in the background)\", \n      \"Hello, hello?\",\n      \"I need to jump into another call\", \n      \"can everyone go on mute?\", \n      \"could you please get closer to the mic?\", \n      \"(load painful echo / feedback)\", \n      \"Next slide, please.\", \n      \"can we take this offline?\", \n      \"is __ on the call?\", \n      \"could you share these slides afterwards?\", \n      \"can somebody grant presenter rights?\", \n      \"can you email that to everyone?\",\n      \"sorry, I had problems logging in\", \n      \"(animal noises in the background)\", \n      \"sorry, I didn't find the conference id\", \n      \"I was having connection issues\", \n      \"I'll have to get back to you\", \n      \"who just joined?\", \n      \"sorry something __ with my calendar\", \n      \"do you see my screen?\", \n      \"let's wait for __!\",\n      \"Will you send the minutes?\", \n      \"Sorry, I was on mute\", \n      \"Can you repeat, please?\", \n      ]\n\nconst App = () => {\n  const [tickets, setTickets] = useState([]);\n  const [isWon, setIsWon] = useState(false);\n  const [winningArray, setWinningArray] = useState(Array(winningCombinations.length).fill(false));\n  \n  useEffect(() => {\n    let shuffled = ticketNames.sort(() => Math.random() - 0.5);\n    shuffled.splice(12, 0, \"CONF CALL BINGO\")\n    setTickets(shuffled.map((name, index) => {\n      if (index !== 12) {\n        return { ticket: name, checked: false }\n      } else {\n        return { ticket: name , checked: true }\n      }\n    }));\n  }, []);\n\n  useEffect(() => {\n  }, [tickets])\n\n  useEffect(() => {\n    setIsWon(true);\n  }, [winningArray]);\n  \n  function onTicketClicked(index) {\n    tickets[index].checked = true;\n    setTickets([...tickets], [tickets])\n    checkWin();\n  }\n\n  const checkWin = () => {\n    winningCombinations.forEach((array, index) => {\n      let counterWin = 0;\n      array.map(el => {\n        if ((tickets[el]) && (tickets[el].checked == true)) {\n          counterWin++\n        }\n      })\n      if ((counterWin === 5) && (winningArray[index] == false)) {\n        winningArray[index] = true;\n        setWinningArray([...winningArray], [winningArray]);\n      } else {\n        return\n      }\n    })\n  }\n\n  function Snow() {\n    useEffect(() => {\n      // start();\n      console.log(\"SNOWING\")\n      setTimeout(function(){ \n          setIsWon(false);\n        }, 3000);\n    });\n    return <canvas id=\"canvas\" />;\n  } \n\n  return (\n    <div className=\"App\">\n    <div className=\"sun\"></div>\n    <div className=\"house\">\n        <div className=\"board\">\n        {tickets.map((ticket, index) => {\n          return <Ticket \n                    ticket={ticket} \n                    key={index} \n                    isWon={isWon}\n                    onClick={() => onTicketClicked(index)}\n                    ></Ticket>\n          })\n        }\n        {isWon ? <Snow/> : null}\n        </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}